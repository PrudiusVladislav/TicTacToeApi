// <auto-generated />
using System;
using EfPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfPersistence.Migrations
{
    [DbContext(typeof(GameStatisticsDbContext))]
    partial class GameStatisticsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfPersistence.Models.MatchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstPlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDraw")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MatchDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstPlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SecondPlayerId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("MatchResults");
                });

            modelBuilder.Entity("EfPersistence.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EfPersistence.Models.MatchResult", b =>
                {
                    b.HasOne("EfPersistence.Models.Player", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EfPersistence.Models.Player", null)
                        .WithMany("MatchResults")
                        .HasForeignKey("PlayerId");

                    b.HasOne("EfPersistence.Models.Player", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EfPersistence.Models.Player", "WinnerPlayer")
                        .WithMany()
                        .HasForeignKey("WinnerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FirstPlayer");

                    b.Navigation("SecondPlayer");

                    b.Navigation("WinnerPlayer");
                });

            modelBuilder.Entity("EfPersistence.Models.Player", b =>
                {
                    b.Navigation("MatchResults");
                });
#pragma warning restore 612, 618
        }
    }
}
